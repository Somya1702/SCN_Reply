import osfrom fastapi import FastAPI, UploadFile, Filefrom fastapi.responses import HTMLResponse, FileResponsefrom docx import Documentimport fitz  # PyMuPDFimport openaiapp = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)# Fetch OpenAI API Key from Render Environment VariableOPENAI_API_KEY = os.getenv("OPENAI_API_KEY")@app.get("/", response_class=HTMLResponse)async def home():    return """    <html>    <head>        <title>SCN REPLY</title>        <style>            body {                display: flex;                flex-direction: column;                justify-content: center;                align-items: center;                height: 100vh;                background-color: white;                margin: 0;                padding-top: 50px;            }            h1 {                color: #00008B;                font-size: 3rem;                text-align: center;            }            button {                background-color: #00008B;                color: white;                padding: 10px 20px;                font-size: 16px;                border: none;                cursor: pointer;                margin-top: 20px;                border-radius: 5px;            }            #downloadButton {                display: none;            }            #wordUpload {                display: none; /* Initially hidden */            }            input {                margin-top: 10px;            }            p {                font-size: 18px;                color: green;            }        </style>    </head>    <body>        <h1>SCN REPLY</h1>        <form id="uploadForm" action="/upload/" method="post" enctype="multipart/form-data">            <label><b>Upload PDF for Analysis:</b></label>            <input type="file" name="pdf_file" accept=".pdf" required><br><br>                        <div id="wordUpload">                <label><b>Upload GPT Command (Word File):</b></label>                <input type="file" name="prompt_file" accept=".docx" required><br><br>            </div>            <button type="submit">Upload</button>        </form>                <p id="message">Waiting for upload...</p>        <button id="downloadButton" onclick="window.location.href='/download/'">Download Analysis Report</button>        <script>            document.querySelector("#uploadForm").onsubmit = async (e) => {                e.preventDefault();                const formData = new FormData(e.target);                document.getElementById("message").innerHTML = "Uploading..."; // Show uploading message                const response = await fetch("/upload/", {                    method: "POST",                    body: formData                });                if (response.ok) {                    document.getElementById("message").innerHTML = "Files uploaded successfully!";                    document.getElementById("downloadButton").style.display = "block"; // Show Download button                } else {                    document.getElementById("message").innerHTML = "Upload failed. Try again.";                }            };            document.querySelector("input[name='pdf_file']").onchange = () => {                document.getElementById("wordUpload").style.display = "block"; // Show Word upload after PDF is selected            };        </script>    </body>    </html>    """def extract_text_from_pdf(pdf_path):    """ Extract text from PDF using PyMuPDF (fitz). """    doc = fitz.open(pdf_path)    text = ""    for page in doc:        text += page.get_text("text") + "\n"    return textdef extract_text_from_word(docx_path):    """ Extract text from a Word file. """    doc = Document(docx_path)    return "\n".join([para.text for para in doc.paragraphs])def process_with_chatgpt(prompt, pdf_text):    """ Send extracted text and prompt to OpenAI ChatGPT for analysis. """    api_key = os.getenv("OPENAI_API_KEY")    if not api_key:        print("Error: OpenAI API key is missing. Please configure it in Render.")        return "Error: OpenAI API key is missing. Please configure it in Render."    try:        client = openai.OpenAI(api_key=api_key)        response = client.chat.completions.create(            model="gpt-4",            messages=[                {"role": "system", "content": "You are an AI that follows user commands to analyze PDFs."},                {"role": "user", "content": f"Command: {prompt}\n\nPDF Content:\n{pdf_text}"}            ]        )        return response.choices[0].message.content        except openai.OpenAIError as e:        print(f"OpenAI API Error: {e}")        return f"Error: {e}"@app.post("/upload/")async def upload_files(prompt_file: UploadFile = File(...), pdf_file: UploadFile = File(...)):    prompt_path = f"temp_{prompt_file.filename}"    pdf_path = f"temp_{pdf_file.filename}"    # Save the uploaded files    with open(prompt_path, "wb") as buffer:        buffer.write(prompt_file.file.read())    with open(pdf_path, "wb") as buffer:        buffer.write(pdf_file.file.read())    # Extract text from both files    prompt_text = extract_text_from_word(prompt_path)    pdf_text = extract_text_from_pdf(pdf_path)    # Send to ChatGPT for analysis    ai_analysis = process_with_chatgpt(prompt_text, pdf_text)    # Save AI analysis in a Word file    analysis_doc = Document()    analysis_doc.add_paragraph("SCN Reply Analysis Report\n")    analysis_doc.add_paragraph(f"Command Used:\n{prompt_text}\n")    analysis_doc.add_paragraph(f"AI Analysis:\n{ai_analysis}\n")    analysis_doc.save("SCN_Reply_Analysis.docx")    # Remove temporary files    os.remove(prompt_path)    os.remove(pdf_path)    return {"status": "success"}@app.get("/download/")async def download_file():    return FileResponse("SCN_Reply_Analysis.docx", filename="SCN_Reply_Analysis.docx", media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document")