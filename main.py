import osfrom fastapi import FastAPI, UploadFile, Filefrom fastapi.responses import HTMLResponsefrom datetime import datetimeimport fitz  # PyMuPDFimport openaiapp = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)# Fetch OpenAI API Key from Render Environment VariableOPENAI_API_KEY = os.getenv("OPENAI_API_KEY")@app.get("/", response_class=HTMLResponse)async def home():    return """    <html>    <head>        <title>SCN REPLY</title>        <style>            body {                display: flex;                flex-direction: column;                align-items: center;                min-height: 100vh;                background-color: white;                margin: 0;                padding-top: 50px;                overflow-x: hidden; /* Prevents horizontal scrolling */                word-wrap: break-word; /* Ensures text wraps correctly */            }            h1 {                color: #00008B;                font-size: 3rem;                text-align: center;            }            button {                background-color: #00008B;                color: white;                padding: 10px 20px;                font-size: 16px;                border: none;                cursor: pointer;                margin-top: 20px;                border-radius: 5px;            }            #analysis, #replyLetter {                text-align: left;                font-size: 18px;                color: black;                max-width: 80%;                margin-top: 20px;                white-space: pre-wrap;            }            input {                margin-top: 10px;            }            p {                font-size: 18px;                color: green;            }            #summaryButton, #replyButton {                display: none;            }        </style>    </head>    <body>        <h1>SCN REPLY</h1>        <form id="uploadForm" action="/upload/" method="post" enctype="multipart/form-data">            <input type="file" name="file" accept=".pdf" required>            <button type="submit">Upload</button>        </form>        <p id="message"></p>        <button id="summaryButton" onclick="fetchAnalysis()">Summary</button>        <button id="replyButton" onclick="fetchReply()">Reply</button>        <div id="analysis"></div>        <div id="replyLetter"></div>        <script>            document.querySelector("#uploadForm").onsubmit = async (e) => {                e.preventDefault();                const formData = new FormData(e.target);                document.getElementById("message").innerHTML = "Uploading...";                const response = await fetch("/upload/", {                    method: "POST",                    body: formData                });                const result = await response.json();                document.getElementById("message").innerHTML = "File uploaded successfully!";                document.getElementById("summaryButton").style.display = "block";                document.getElementById("replyButton").style.display = "block";            };            async function fetchAnalysis() {                document.getElementById("summaryButton").innerHTML = "Generating Summary...";                const response = await fetch("/get_analysis");                const result = await response.json();                document.getElementById("analysis").innerHTML = "<p>" + result.analysis.join("</p><p>") + "</p>";                document.getElementById("summaryButton").innerHTML = "Summary";            }            async function fetchReply() {                document.getElementById("replyButton").innerHTML = "Generating Reply...";                const response = await fetch("/get_reply");                const result = await response.json();                document.getElementById("replyLetter").innerHTML = `<pre>${result.reply}</pre>`;                document.getElementById("replyButton").innerHTML = "Reply";            }        </script>    </body>    </html>    """def extract_text_from_pdf(pdf_path):    """ Extract text from PDF using PyMuPDF (fitz). """    doc = fitz.open(pdf_path)    text = ""    for page in doc:        text += page.get_text("text") + "\n"    return textdef generate_reply_letter(analysis_text):    """ Generate a structured reply letter using OpenAI GPT-4. """    date = datetime.today().strftime('%B %d, %Y')    prompt = f"""    Draft a formal reply letter based on the following analysis:    Date: {date} (Right-Aligned)        [Authority's Name & Address Here]        To,    [Recipient's Name & Address Here]    GSTIN: [Recipient's GSTIN]        Subject: Response to the Show Cause Notice        Dear Sir/Madam,        {analysis_text}        Sincerely,    [Your Name/Company Name]    """        client = openai.OpenAI(api_key=OPENAI_API_KEY)    response = client.chat.completions.create(        model="gpt-4",        messages=[{"role": "user", "content": prompt}]    )    return response.choices[0].message.contentuploaded_data = {}@app.post("/upload/")async def upload_file(file: UploadFile = File(...)):    pdf_path = f"temp_{file.filename}"    with open(pdf_path, "wb") as buffer:        buffer.write(file.file.read())    extracted_text = extract_text_from_pdf(pdf_path)    analysis_result = extracted_text  # Placeholder for real AI analysis    reply_letter = generate_reply_letter(analysis_result)    os.remove(pdf_path)    uploaded_data["analysis"] = analysis_result.split("\n")    uploaded_data["reply"] = reply_letter    return {"message": "Upload successful"}@app.get("/get_analysis")async def get_analysis():    return {"analysis": uploaded_data.get("analysis", ["No analysis available."])}@app.get("/get_reply")async def get_reply():    return {"reply": uploaded_data.get("reply", "No reply available.")}